/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pelacak.langganan.digital.ui;

import com.mycompany.pelacak.langganan.digital.theme.RegisterTheme;
import com.mycompany.pelacak.langganan.digital.service.LocalizationService;
import com.mycompany.pelacak.langganan.digital.db.SubscriptionDAO;
import com.mycompany.pelacak.langganan.digital.model.Subscription;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

/**
 *
 * @author rifial
 */
@SuppressWarnings("serial")
public class addSubscription extends javax.swing.JDialog {

    private UIFORM parentUIForm;

    private Map<String, String> cycleDisplayToInternalMap;
    private byte[] selectedLogoBytes;
    private Subscription currentSubscription;

    public addSubscription(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        if (parent instanceof UIFORM) {
            this.parentUIForm = (UIFORM) parent;
        }

        initComponents(); 
        applyCustomThemeColors();

        pembayaranselanjutnya.setDate(new java.util.Date());

        sikluscombobox.addActionListener((ActionEvent e) -> {
            updateDueDate();
        });

        updateTexts();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        pembayaranselanjutnya.setFont(new Font("Malgun Gothic", Font.PLAIN, 16));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        namalayanan = new javax.swing.JLabel();
        inputnamalayanan = new javax.swing.JTextField();
        buttonadddata = new javax.swing.JButton();
        SubTitle = new javax.swing.JLabel();
        buttonaddimage = new javax.swing.JButton();
        inputbiayalayanan = new javax.swing.JTextField();
        biayalayanan = new javax.swing.JLabel();
        sikluslayanan = new javax.swing.JLabel();
        pembayaranberikutnyalabel = new javax.swing.JLabel();
        pembayaranselanjutnya = new com.toedter.calendar.JDateChooser();
        sikluscombobox = new javax.swing.JComboBox<>();
        inputnamalayanan1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        Title.setFont(new java.awt.Font("Malgun Gothic", 0, 24)); // NOI18N
        Title.setText("TAMBAH DATA");

        namalayanan.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        namalayanan.setText("NAMA LAYANAN");

        inputnamalayanan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputnamalayanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputnamalayananActionPerformed(evt);
            }
        });

        buttonadddata.setBackground(new java.awt.Color(0, 51, 204));
        buttonadddata.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        buttonadddata.setForeground(new java.awt.Color(255, 255, 255));
        buttonadddata.setText("SIMPAN DATA");
        buttonadddata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonadddataActionPerformed(evt);
            }
        });

        SubTitle.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        SubTitle.setForeground(new java.awt.Color(255, 255, 255));
        SubTitle.setText("ISI FORM BERIKUT UNTUK MENAMBAHKAN DATA LANGGANAN BARU");

        buttonaddimage.setBackground(new java.awt.Color(51, 51, 51));
        buttonaddimage.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        buttonaddimage.setForeground(new java.awt.Color(255, 255, 255));
        buttonaddimage.setText("TAMBAH LOGO");
        buttonaddimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonaddimageActionPerformed(evt);
            }
        });

        inputbiayalayanan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputbiayalayanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputbiayalayananActionPerformed(evt);
            }
        });

        biayalayanan.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        biayalayanan.setText("BIAYA LAYANAN");

        sikluslayanan.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        sikluslayanan.setText("SIKLUS LAYANAN");

        pembayaranberikutnyalabel.setFont(new java.awt.Font("Malgun Gothic", 0, 16)); // NOI18N
        pembayaranberikutnyalabel.setText("PEMBAYARAN SELANJUTNYA");

        pembayaranselanjutnya.setForeground(new java.awt.Color(255, 255, 255));

        sikluscombobox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        sikluscombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        inputnamalayanan1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        inputnamalayanan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputnamalayanan1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputnamalayanan1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonaddimage, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(buttonadddata, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(namalayanan)
                            .addComponent(inputnamalayanan)
                            .addComponent(inputbiayalayanan, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                            .addComponent(biayalayanan)
                            .addComponent(sikluslayanan)
                            .addComponent(pembayaranberikutnyalabel)
                            .addComponent(pembayaranselanjutnya, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sikluscombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(116, 116, 116))
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(Title)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(SubTitle)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(Title)
                .addGap(30, 30, 30)
                .addComponent(SubTitle)
                .addGap(35, 35, 35)
                .addComponent(namalayanan)
                .addGap(18, 18, 18)
                .addComponent(inputnamalayanan, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(biayalayanan)
                .addGap(18, 18, 18)
                .addComponent(inputbiayalayanan, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sikluslayanan)
                .addGap(18, 18, 18)
                .addComponent(sikluscombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pembayaranberikutnyalabel)
                .addGap(18, 18, 18)
                .addComponent(pembayaranselanjutnya, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonaddimage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputnamalayanan1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(buttonadddata, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonadddataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonadddataActionPerformed
        String serviceName = inputnamalayanan.getText();
        String billAmountStr = inputbiayalayanan.getText();
        String selectedCycleDisplay = (String) sikluscombobox.getSelectedItem();
        java.util.Date utilDate = pembayaranselanjutnya.getDate();

        LocalDate nextPaymentLocalDate = null;
        if (utilDate != null) {
            nextPaymentLocalDate = utilDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }

        if (serviceName.isEmpty() || serviceName.equals(LocalizationService.getString("add.placeholder.serviceName"))) {
            JOptionPane.showMessageDialog(this, LocalizationService.getString("dialog.message.serviceNameEmpty"), LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        double billAmount;
        try {
            billAmount = Double.parseDouble(billAmountStr);
            if (billAmount <= 0) {
                JOptionPane.showMessageDialog(this, LocalizationService.getString("dialog.message.billAmountInvalid"), LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, LocalizationService.getString("dialog.message.billAmountNumeric"), LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedCycleDisplay == null || nextPaymentLocalDate == null) {
            JOptionPane.showMessageDialog(this, LocalizationService.getString("dialog.message.cycleAndDateEmpty"), LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        String cycleInternal = cycleDisplayToInternalMap.get(selectedCycleDisplay);
        if (cycleInternal == null) {
            JOptionPane.showMessageDialog(this, LocalizationService.getString("dialog.message.cycleInvalid"), LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        Subscription newSub = new Subscription();
        newSub.setServiceName(serviceName);
        newSub.setCost(billAmount);
        newSub.setCurrency("IDR");
        newSub.setBillingCycle(cycleInternal);
        newSub.setNextDueDate(nextPaymentLocalDate);
        newSub.setLogo(selectedLogoBytes);

        SubscriptionDAO subDAO = new SubscriptionDAO();
        boolean success = subDAO.addSubscription(newSub);

        if (success) {
            JOptionPane.showMessageDialog(this,
                    LocalizationService.getString("dialog.message.addSuccess"),
                    LocalizationService.getString("dialog.title.success"), JOptionPane.INFORMATION_MESSAGE);
            if (parentUIForm != null) {
                parentUIForm.refreshSubscriptionTable();
            }
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this,
                    LocalizationService.getString("dialog.message.addFailed"),
                    LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_buttonadddataActionPerformed

    private void inputnamalayananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputnamalayananActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputnamalayananActionPerformed

    private void buttonaddimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonaddimageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(LocalizationService.getString("dialog.title.selectLogo"));
        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                selectedLogoBytes = Files.readAllBytes(selectedFile.toPath());

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        LocalizationService.getString("dialog.message.imageLoadFailed", ex.getMessage()),
                        LocalizationService.getString("dialog.title.error"), JOptionPane.ERROR_MESSAGE);
                selectedLogoBytes = null;
            }
        }
    }//GEN-LAST:event_buttonaddimageActionPerformed

    private void inputbiayalayananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputbiayalayananActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputbiayalayananActionPerformed

    private void inputnamalayanan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputnamalayanan1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputnamalayanan1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SubTitle;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel biayalayanan;
    private javax.swing.JButton buttonadddata;
    private javax.swing.JButton buttonaddimage;
    private javax.swing.JTextField inputbiayalayanan;
    private javax.swing.JTextField inputnamalayanan;
    private javax.swing.JTextField inputnamalayanan1;
    private javax.swing.JLabel namalayanan;
    private javax.swing.JLabel pembayaranberikutnyalabel;
    private com.toedter.calendar.JDateChooser pembayaranselanjutnya;
    private javax.swing.JComboBox<String> sikluscombobox;
    private javax.swing.JLabel sikluslayanan;
    // End of variables declaration//GEN-END:variables

    private void applyCustomThemeColors() {
        RegisterTheme.styleDialogBackground(this);
        RegisterTheme.styleLabelColor(Title, RegisterTheme.COLOR_FOREGROUND);
        RegisterTheme.styleLabelColor(SubTitle, RegisterTheme.COLOR_PLACEHOLDER);
        RegisterTheme.styleLabelColor(namalayanan, RegisterTheme.COLOR_FOREGROUND);
        RegisterTheme.styleTextField(inputnamalayanan);
        RegisterTheme.styleTextField(inputbiayalayanan);
        RegisterTheme.styleComboBox(sikluscombobox);
        RegisterTheme.styleButton(buttonadddata);
        RegisterTheme.styleDateChooser(pembayaranselanjutnya);
    }

    private void updateDueDate() {
        String selectedDisplayText = (String) sikluscombobox.getSelectedItem();
        if (selectedDisplayText == null) {
            return;
        }

        String pilihanSiklus = cycleDisplayToInternalMap.get(selectedDisplayText);

        if (pilihanSiklus == null) {
            pembayaranselanjutnya.setEnabled(true);
            return;
        }

        if (pilihanSiklus.equals("Pilih Tanggal Manual...")) {
            pembayaranselanjutnya.setEnabled(true);
        } else {
            pembayaranselanjutnya.setEnabled(false);
        }

        LocalDate tanggalHariIni = LocalDate.now();
        LocalDate tanggalJatuhTempo = tanggalHariIni;

        switch (pilihanSiklus) {
            case "1 Bulan" ->
                tanggalJatuhTempo = tanggalHariIni.plusMonths(1);
            case "3 Bulan" ->
                tanggalJatuhTempo = tanggalHariIni.plusMonths(3);
            case "6 Bulan" ->
                tanggalJatuhTempo = tanggalHariIni.plusMonths(6);
            case "1 Tahun" ->
                tanggalJatuhTempo = tanggalHariIni.plusYears(1);
        }

        java.util.Date tanggalUntukChooser = java.util.Date.from(tanggalJatuhTempo.atStartOfDay(ZoneId.systemDefault()).toInstant());
        pembayaranselanjutnya.setDate(tanggalUntukChooser);
    }

    private void updateTexts() {
        // 1. Atur Judul Dialog & Label-label
        this.setTitle(LocalizationService.getString("add.dialog.title"));
        Title.setText(LocalizationService.getString("add.title"));
        SubTitle.setText(LocalizationService.getString("add.subtitle"));
        namalayanan.setText(LocalizationService.getString("add.label.serviceName"));
        biayalayanan.setText(LocalizationService.getString("add.label.serviceCost"));
        sikluslayanan.setText(LocalizationService.getString("add.label.serviceCycle"));
        pembayaranberikutnyalabel.setText(LocalizationService.getString("add.label.nextPayment"));

        // 2. Atur Teks Tombol
        buttonadddata.setText(LocalizationService.getString("add.button.saveData"));
        buttonaddimage.setText(LocalizationService.getString("add.button.addLogo"));

        // 3. Atur Placeholder untuk Input Fields
        RegisterTheme.updatePlaceholder(inputnamalayanan, LocalizationService.getString("add.placeholder.serviceName"));
        RegisterTheme.updatePlaceholder(inputbiayalayanan, LocalizationService.getString("add.placeholder.serviceCost"));

        // 4. Perbarui Item ComboBox Siklus
        String selectedItemBeforeUpdate = (String) sikluscombobox.getSelectedItem(); // Simpan pilihan sebelumnya

        sikluscombobox.removeAllItems(); // Hapus semua item lama
        cycleDisplayToInternalMap = new LinkedHashMap<>(); // Buat ulang map

        // Tambahkan item yang sudah dilokalisasi dan petakan ke nilai internalnya
        cycleDisplayToInternalMap.put(LocalizationService.getString("cycle.monthly"), "1 Bulan");
        cycleDisplayToInternalMap.put(LocalizationService.getString("cycle.quarterly"), "3 Bulan");
        cycleDisplayToInternalMap.put(LocalizationService.getString("cycle.halfYearly"), "6 Bulan");
        cycleDisplayToInternalMap.put(LocalizationService.getString("cycle.yearly"), "1 Tahun");
        cycleDisplayToInternalMap.put(LocalizationService.getString("cycle.manual"), "Pilih Tanggal Manual...");

        for (String displayValue : cycleDisplayToInternalMap.keySet()) {
            sikluscombobox.addItem(displayValue);
        }

        // Coba kembalikan pilihan sebelumnya jika ada di map baru
        if (cycleDisplayToInternalMap.containsKey(selectedItemBeforeUpdate)) {
            sikluscombobox.setSelectedItem(selectedItemBeforeUpdate);
        } else {
            // Jika pilihan sebelumnya tidak ada di bahasa baru
            sikluscombobox.setSelectedItem(LocalizationService.getString("cycle.monthly"));
        }

        // Panggil updateDueDate untuk memastikan tanggal jatuh tempo diperbarui setelah item combobox diubah
        updateDueDate();
    }

}
